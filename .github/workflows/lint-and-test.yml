# This workflow will install Python dependencies, run tests and lint with a variety of Python versions
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-python

name: Lint and run unit tests

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:
  test:

    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        python-version: ["3.8", "3.9", "3.10", "3.11", "3.12"]

    steps:
    - uses: actions/checkout@v4
    - name: Install poetry
      run: pipx install poetry==1.8.2
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v5
      with:
        python-version: ${{ matrix.python-version }}
        cache: 'poetry'
    - name: Install dependencies
      run: |
        poetry install --with dev
    - name: Lint with flake8
      run: |
        # stop the build if there are Python syntax errors or undefined names
        poetry run flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
        # exit-zero treats all errors as warnings. The GitHub editor is 127 chars wide
        poetry run flake8 --count --exit-zero --statistics
    - name: Test with pytest
      run: |
        poetry run pytest --junit-xml=test-results.xml
    - name: Report failing tests
      if: always()
      uses: pmeier/pytest-results-action@main
      with:
        path: test-results.xml
        summary: true
        # Select which results should be included in the report.
        # Follows the same syntax as `pytest -r`
        display-options: fEXP
        fail-on-empty: true
        title: Test results
